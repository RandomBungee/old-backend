// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user/team_user_service.proto

package com.gitlab.leonklein.user;

/**
 * Protobuf type {@code user.CreateTeamUserRequest}
 */
public  final class CreateTeamUserRequest extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:user.CreateTeamUserRequest)
    CreateTeamUserRequestOrBuilder {
  // Use CreateTeamUserRequest.newBuilder() to construct.
  private CreateTeamUserRequest(com.google.protobuf.GeneratedMessage.Builder builder) {
    super(builder);
  }
  private CreateTeamUserRequest() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private CreateTeamUserRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.gitlab.leonklein.user.TeamUser.Builder subBuilder = null;
            if (teamuser_ != null) {
              subBuilder = teamuser_.toBuilder();
            }
            teamuser_ = input.readMessage(com.gitlab.leonklein.user.TeamUser.PARSER, extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(teamuser_);
              teamuser_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.gitlab.leonklein.user.TeamUserServiceOuterClass.internal_static_user_CreateTeamUserRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.gitlab.leonklein.user.TeamUserServiceOuterClass.internal_static_user_CreateTeamUserRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.gitlab.leonklein.user.CreateTeamUserRequest.class, com.gitlab.leonklein.user.CreateTeamUserRequest.Builder.class);
  }

  public static final int TEAMUSER_FIELD_NUMBER = 1;
  private com.gitlab.leonklein.user.TeamUser teamuser_;
  /**
   * <code>optional .user.TeamUser teamuser = 1;</code>
   */
  public boolean hasTeamuser() {
    return teamuser_ != null;
  }
  /**
   * <code>optional .user.TeamUser teamuser = 1;</code>
   */
  public com.gitlab.leonklein.user.TeamUser getTeamuser() {
    return teamuser_ == null ? com.gitlab.leonklein.user.TeamUser.getDefaultInstance() : teamuser_;
  }
  /**
   * <code>optional .user.TeamUser teamuser = 1;</code>
   */
  public com.gitlab.leonklein.user.TeamUserOrBuilder getTeamuserOrBuilder() {
    return getTeamuser();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (teamuser_ != null) {
      output.writeMessage(1, getTeamuser());
    }
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (teamuser_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getTeamuser());
    }
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static com.gitlab.leonklein.user.CreateTeamUserRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.gitlab.leonklein.user.CreateTeamUserRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code user.CreateTeamUserRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:user.CreateTeamUserRequest)
      com.gitlab.leonklein.user.CreateTeamUserRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.gitlab.leonklein.user.TeamUserServiceOuterClass.internal_static_user_CreateTeamUserRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.gitlab.leonklein.user.TeamUserServiceOuterClass.internal_static_user_CreateTeamUserRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.gitlab.leonklein.user.CreateTeamUserRequest.class, com.gitlab.leonklein.user.CreateTeamUserRequest.Builder.class);
    }

    // Construct using com.gitlab.leonklein.user.CreateTeamUserRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (teamuserBuilder_ == null) {
        teamuser_ = null;
      } else {
        teamuser_ = null;
        teamuserBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.gitlab.leonklein.user.TeamUserServiceOuterClass.internal_static_user_CreateTeamUserRequest_descriptor;
    }

    public com.gitlab.leonklein.user.CreateTeamUserRequest getDefaultInstanceForType() {
      return com.gitlab.leonklein.user.CreateTeamUserRequest.getDefaultInstance();
    }

    public com.gitlab.leonklein.user.CreateTeamUserRequest build() {
      com.gitlab.leonklein.user.CreateTeamUserRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.gitlab.leonklein.user.CreateTeamUserRequest buildPartial() {
      com.gitlab.leonklein.user.CreateTeamUserRequest result = new com.gitlab.leonklein.user.CreateTeamUserRequest(this);
      if (teamuserBuilder_ == null) {
        result.teamuser_ = teamuser_;
      } else {
        result.teamuser_ = teamuserBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.gitlab.leonklein.user.CreateTeamUserRequest) {
        return mergeFrom((com.gitlab.leonklein.user.CreateTeamUserRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.gitlab.leonklein.user.CreateTeamUserRequest other) {
      if (other == com.gitlab.leonklein.user.CreateTeamUserRequest.getDefaultInstance()) return this;
      if (other.hasTeamuser()) {
        mergeTeamuser(other.getTeamuser());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.gitlab.leonklein.user.CreateTeamUserRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.gitlab.leonklein.user.CreateTeamUserRequest) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.gitlab.leonklein.user.TeamUser teamuser_ = null;
    private com.google.protobuf.SingleFieldBuilder<
        com.gitlab.leonklein.user.TeamUser, com.gitlab.leonklein.user.TeamUser.Builder, com.gitlab.leonklein.user.TeamUserOrBuilder> teamuserBuilder_;
    /**
     * <code>optional .user.TeamUser teamuser = 1;</code>
     */
    public boolean hasTeamuser() {
      return teamuserBuilder_ != null || teamuser_ != null;
    }
    /**
     * <code>optional .user.TeamUser teamuser = 1;</code>
     */
    public com.gitlab.leonklein.user.TeamUser getTeamuser() {
      if (teamuserBuilder_ == null) {
        return teamuser_ == null ? com.gitlab.leonklein.user.TeamUser.getDefaultInstance() : teamuser_;
      } else {
        return teamuserBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .user.TeamUser teamuser = 1;</code>
     */
    public Builder setTeamuser(com.gitlab.leonklein.user.TeamUser value) {
      if (teamuserBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        teamuser_ = value;
        onChanged();
      } else {
        teamuserBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>optional .user.TeamUser teamuser = 1;</code>
     */
    public Builder setTeamuser(
        com.gitlab.leonklein.user.TeamUser.Builder builderForValue) {
      if (teamuserBuilder_ == null) {
        teamuser_ = builderForValue.build();
        onChanged();
      } else {
        teamuserBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>optional .user.TeamUser teamuser = 1;</code>
     */
    public Builder mergeTeamuser(com.gitlab.leonklein.user.TeamUser value) {
      if (teamuserBuilder_ == null) {
        if (teamuser_ != null) {
          teamuser_ =
            com.gitlab.leonklein.user.TeamUser.newBuilder(teamuser_).mergeFrom(value).buildPartial();
        } else {
          teamuser_ = value;
        }
        onChanged();
      } else {
        teamuserBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>optional .user.TeamUser teamuser = 1;</code>
     */
    public Builder clearTeamuser() {
      if (teamuserBuilder_ == null) {
        teamuser_ = null;
        onChanged();
      } else {
        teamuser_ = null;
        teamuserBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>optional .user.TeamUser teamuser = 1;</code>
     */
    public com.gitlab.leonklein.user.TeamUser.Builder getTeamuserBuilder() {
      
      onChanged();
      return getTeamuserFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .user.TeamUser teamuser = 1;</code>
     */
    public com.gitlab.leonklein.user.TeamUserOrBuilder getTeamuserOrBuilder() {
      if (teamuserBuilder_ != null) {
        return teamuserBuilder_.getMessageOrBuilder();
      } else {
        return teamuser_ == null ?
            com.gitlab.leonklein.user.TeamUser.getDefaultInstance() : teamuser_;
      }
    }
    /**
     * <code>optional .user.TeamUser teamuser = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.gitlab.leonklein.user.TeamUser, com.gitlab.leonklein.user.TeamUser.Builder, com.gitlab.leonklein.user.TeamUserOrBuilder> 
        getTeamuserFieldBuilder() {
      if (teamuserBuilder_ == null) {
        teamuserBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.gitlab.leonklein.user.TeamUser, com.gitlab.leonklein.user.TeamUser.Builder, com.gitlab.leonklein.user.TeamUserOrBuilder>(
                getTeamuser(),
                getParentForChildren(),
                isClean());
        teamuser_ = null;
      }
      return teamuserBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:user.CreateTeamUserRequest)
  }

  // @@protoc_insertion_point(class_scope:user.CreateTeamUserRequest)
  private static final com.gitlab.leonklein.user.CreateTeamUserRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.gitlab.leonklein.user.CreateTeamUserRequest();
  }

  public static com.gitlab.leonklein.user.CreateTeamUserRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  public static final com.google.protobuf.Parser<CreateTeamUserRequest> PARSER =
      new com.google.protobuf.AbstractParser<CreateTeamUserRequest>() {
    public CreateTeamUserRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new CreateTeamUserRequest(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<CreateTeamUserRequest> getParserForType() {
    return PARSER;
  }

  public com.gitlab.leonklein.user.CreateTeamUserRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

